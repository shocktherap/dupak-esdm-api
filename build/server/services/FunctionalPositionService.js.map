{"version":3,"sources":["../../../api/server/services/FunctionalPositionService.js"],"names":["FunctionalPositionService","database","FunctionalPosition","findAll","newFunctionalPosition","create","id","updateFunctionalPosition","findOne","where","Number","FunctionalPositionToUpdate","update","theFunctionalPosition","FunctionalPositionToDelete","destroy","deletedFunctionalPosition"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;IAEMA,yB;;;;;;;;;;;;;;;uBAGaC,mBAASC,kBAAT,CAA4BC,OAA5B,E;;;;;;;;;;;;;;;;;;;;;;;;;;;mIAMkBC,qB;;;;;;;uBAElBH,mBAASC,kBAAT,CAA4BG,MAA5B,CAAmCD,qBAAnC,C;;;;;;;;;;;;;;;;;;;;;;;;;;;uIAMqBE,E,EAAIC,yB;;;;;;;;uBAEGN,mBAASC,kBAAT,CAA4BM,OAA5B,CAAoC;AAC3EC,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AADoE,iBAApC,C;;;AAAnCK,gBAAAA,0B;;qBAIFA,0B;;;;;;uBACIV,mBAASC,kBAAT,CAA4BU,MAA5B,CAAmCL,yBAAnC,EAA6D;AAAEE,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AAAT,iBAA7D,C;;;kDAECC,yB;;;kDAEF,I;;;;;;;;;;;;;;;;;;;;;;;;oIAMyBD,E;;;;;;;;uBAEIL,mBAASC,kBAAT,CAA4BM,OAA5B,CAAoC;AACtEC,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AAD+D,iBAApC,C;;;AAA9BO,gBAAAA,qB;kDAICA,qB;;;;;;;;;;;;;;;;;;;;;;;;sIAM2BP,E;;;;;;;;uBAEOL,mBAASC,kBAAT,CAA4BM,OAA5B,CAAoC;AAAEC,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AAAT,iBAApC,C;;;AAAnCQ,gBAAAA,0B;;qBAEFA,0B;;;;;;uBACsCb,mBAASC,kBAAT,CAA4Ba,OAA5B,CAAoC;AAC1EN,kBAAAA,KAAK,EAAE;AAAEH,oBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AADmE,iBAApC,C;;;AAAlCU,gBAAAA,yB;kDAGCA,yB;;;kDAEF,I;;;;;;;;;;;;;;;;;;;;;;;;;eAOEhB,yB","sourcesContent":["import database from '../src/models';\n\nclass FunctionalPositionService {\n  static async getAllFunctionalPositions() {\n    try {\n      return await database.FunctionalPosition.findAll();\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static async addFunctionalPosition(newFunctionalPosition) {\n    try {\n      return await database.FunctionalPosition.create(newFunctionalPosition);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static async updateFunctionalPosition(id, updateFunctionalPosition) {\n    try {\n      const FunctionalPositionToUpdate = await database.FunctionalPosition.findOne({\n        where: { id: Number(id) }\n      });\n\n      if (FunctionalPositionToUpdate) {\n        await database.FunctionalPosition.update(updateFunctionalPosition, { where: { id: Number(id) } });\n\n        return updateFunctionalPosition;\n      }\n      return null;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static async getAFunctionalPosition(id) {\n    try {\n      const theFunctionalPosition = await database.FunctionalPosition.findOne({\n        where: { id: Number(id) }\n      });\n\n      return theFunctionalPosition;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  static async deleteFunctionalPosition(id) {\n    try {\n      const FunctionalPositionToDelete = await database.FunctionalPosition.findOne({ where: { id: Number(id) } });\n\n      if (FunctionalPositionToDelete) {\n        const deletedFunctionalPosition = await database.FunctionalPosition.destroy({\n          where: { id: Number(id) }\n        });\n        return deletedFunctionalPosition;\n      }\n      return null;\n    } catch (error) {\n      throw error;\n    }\n  }\n}\n\nexport default FunctionalPositionService;"],"file":"FunctionalPositionService.js"}